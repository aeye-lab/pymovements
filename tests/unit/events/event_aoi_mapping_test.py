# Copyright (c) 2023-2025 The pymovements Project Authors
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
"""Test all GazeDataFrame functionality."""
import polars as pl
import pytest
from polars.testing import assert_frame_equal

import pymovements as pm

EXPECTED_DF = {
    'char': pl.DataFrame(
        [
            (0, 1, 'fixation', 1988147, 1988322, 175, 207.4090909090909, 151.54261363636363, ''),
            (0, 1, 'fixation', 1988351, 1988546, 195, 167.10408163265308, 147.5826530612245, ''),
            (0, 1, 'fixation', 1988592, 1988736, 144, 251.9013793103448, 152.1158620689655, ''),
            (0, 1, 'fixation', 1988788, 1989013, 225, 375.60796460177, 156.98584070796457, ''),
            (0, 1, 'fixation', 1989060, 1989170, 110, 447.34954954954986, 153.80810810810806, ''),
            (0, 1, 'fixation', 1989202, 1989424, 222, 513.3, 157.17892376681613, ''),
            (0, 1, 'fixation', 1989461, 1989585, 124, 581.2648000000002, 159.66959999999992, ''),
            (0, 1, 'fixation', 1989640, 1989891, 251, 707.7650793650796, 163.16626984126978, ''),
            (0, 1, 'fixation', 1989929, 1990049, 120, 787.0628099173551, 163.24462809917353, ''),
            (0, 1, 'fixation', 1990078, 1990304, 226, 846.2229074889868, 166.44008810572686, ''),
            (0, 1, 'fixation', 1990356, 1990652, 296, 978.3326599326601, 163.44141414141413, ''),
            (0, 1, 'fixation', 1990751, 1990926, 175, 180.84772727272727, 208.0573863636364, ''),
            (0, 1, 'fixation', 1990961, 1991140, 179, 150.4911111111111, 211.21777777777777, ''),
            (0, 1, 'fixation', 1991189, 1991317, 128, 239.65658914728684, 211.82480620155036, ''),
            (0, 1, 'fixation', 1991353, 1991495, 142, 302.71608391608396, 216.57412587412588, ''),
            (0, 1, 'fixation', 1991527, 1991715, 188, 375.24232804232804, 219.3873015873016, ''),
            (0, 1, 'fixation', 1991745, 1991899, 154, 427.50838709677413, 217.13419354838712, 'y'),
            (0, 1, 'fixation', 1991950, 1992230, 280, 600.1049822064056, 213.44768683274023, ''),
            (0, 1, 'fixation', 1992284, 1992569, 285, 725.8087412587413, 222.21293706293707, ' '),
            (0, 1, 'fixation', 1992611, 1992757, 146, 791.1496598639455, 221.16598639455782, 'a'),
            (0, 1, 'fixation', 1992792, 1992969, 177, 848.5044943820226, 221.47415730337084, ' '),
            (0, 1, 'fixation', 1993004, 1993238, 234, 932.0889361702128, 221.67829787234044, 'y'),
            (0, 1, 'fixation', 1993274, 1993510, 236, 1024.154852320675, 221.48607594936712, 'e'),
            (0, 1, 'fixation', 1993610, 1993716, 106, 200.10841121495332, 264.7196261682243, ''),
            (0, 1, 'fixation', 1993752, 1993948, 196, 157.92436548223353, 268.2375634517766, ''),
            (0, 1, 'fixation', 1993982, 1994193, 211, 241.02405660377357, 271.5188679245283, ''),
            (0, 1, 'fixation', 1994223, 1994383, 160, 296.44596273291927, 273.2776397515528, ''),
            (0, 1, 'fixation', 1994436, 1994710, 274, 435.9218181818182, 286.8061818181818, ''),
            (0, 1, 'fixation', 1994761, 1994900, 139, 522.06, 286.785, ''),
            (0, 1, 'fixation', 1994957, 1995109, 152, 606.8084967320262, 285.3562091503268, ''),
            (0, 1, 'fixation', 1995156, 1995323, 167, 688.3916666666667, 284.9291666666666, ''),
            (0, 1, 'fixation', 1995374, 1995532, 158, 770.340251572327, 289.7440251572327, ''),
            (0, 1, 'fixation', 1995558, 1995805, 247, 825.5754032258062, 287.07620967741934, ''),
            (0, 1, 'fixation', 1995841, 1995988, 147, 880.3533783783784, 283.3432432432432, ''),
            (0, 1, 'fixation', 1996026, 1996198, 172, 938.5502890173411, 281.85953757225434, ''),
            (0, 1, 'fixation', 1996245, 1996412, 167, 1022.4404761904764, 278.0517857142857, ''),
            (0, 1, 'fixation', 1996517, 1996758, 241, 157.65289256198346, 323.6400826446281, ''),
            (0, 1, 'fixation', 1996804, 1997014, 210, 223.56682464454977, 337.47156398104266, ''),
            (0, 1, 'fixation', 1997043, 1997190, 147, 274.86756756756756, 344.575, ''),
            (0, 1, 'fixation', 1997223, 1997438, 215, 368.6263888888888, 349.68055555555554, ''),
            (0, 1, 'fixation', 1997488, 1997653, 165, 460.4620481927711, 359.32289156626507, ''),
            (0, 1, 'fixation', 1997678, 1997905, 227, 432.2407894736842, 357.230701754386, ''),
            (0, 1, 'fixation', 1997954, 1998254, 300, 521.389368770764, 356.7348837209302, ''),
            (0, 1, 'fixation', 1998285, 1998512, 227, 477.1824561403509, 357.9864035087719, ''),
            (0, 1, 'fixation', 1998562, 1998790, 228, 577.8620087336244, 364.32532751091696, ''),
            (0, 1, 'fixation', 1998838, 1999070, 232, 703.7060085836911, 360.56609442060096, ''),
            (0, 1, 'fixation', 1999125, 1999382, 257, 830.8821705426357, 355.15271317829456, ''),
            (0, 1, 'fixation', 1999436, 1999625, 189, 952.5884210526315, 352.0815789473684, ''),
            (0, 1, 'fixation', 1999663, 1999819, 156, 1009.4426751592357, 342.1987261146497, ''),
            (0, 1, 'fixation', 1999922, 2000103, 181, 157.89505494505497, 413.2324175824176, ''),
            (0, 1, 'fixation', 2000129, 2000245, 116, 184.99401709401718, 409.1675213675213, ''),
            (0, 1, 'fixation', 2000295, 2000455, 160, 272.43975155279503, 416.9608695652175, ''),
            (0, 1, 'fixation', 2000514, 2000641, 127, 389.371875, 417.5953125, ''),
            (0, 1, 'fixation', 2000677, 2000894, 217, 446.2220183486238, 419.33073394495403, ''),
            (0, 1, 'fixation', 2000930, 2001173, 243, 526.5098360655738, 423.3586065573772, ''),
            (0, 1, 'fixation', 2001208, 2001459, 251, 612.4912698412701, 425.66468253968253, ''),
            (0, 1, 'fixation', 2001495, 2001712, 217, 708.4536697247707, 423.444495412844, ''),
            (0, 1, 'fixation', 2001746, 2001930, 184, 773.7962162162162, 423.02918918918914, ''),
            (0, 1, 'fixation', 2002003, 2002122, 119, 857.3725000000001, 422.345, ''),
            (0, 1, 'fixation', 2002160, 2002306, 146, 936.16462585034, 418.06870748299326, ''),
            (0, 1, 'fixation', 2002308, 2002442, 134, 940.3585185185185, 416.97555555555556, ''),
            (0, 1, 'fixation', 2002495, 2002603, 108, 1034.388990825688, 409.68256880733946, ''),
            (0, 1, 'fixation', 2002709, 2002831, 122, 134.0609756097561, 491.25121951219506, ''),
            (0, 1, 'fixation', 2002863, 2003003, 140, 161.38581560283689, 482.5148936170213, ''),
            (0, 1, 'fixation', 2003042, 2003424, 382, 211.222454308094, 483.4208877284595, ''),
            (0, 1, 'fixation', 2003453, 2003657, 204, 283.9468292682926, 485.65999999999997, ''),
            (0, 1, 'fixation', 2003721, 2003917, 196, 422.41421319796956, 484.2720812182742, ''),
            (0, 1, 'fixation', 2003968, 2004074, 106, 509.65233644859813, 480.192523364486, ''),
            (0, 1, 'fixation', 2004132, 2004331, 199, 610.861, 484.6025000000001, ''),
            (0, 1, 'fixation', 2004399, 2004687, 288, 717.8470588235293, 486.0269896193772, ''),
            (0, 1, 'fixation', 2004714, 2004878, 164, 785.6884848484849, 481.4890909090909, ''),
            (0, 1, 'fixation', 2004931, 2005109, 178, 896.4055865921787, 480.51899441340777, ''),
            (0, 1, 'fixation', 2005138, 2005287, 149, 933.612, 481.8833333333333, ''),
        ],
        schema=[
            'text_id',
            'page_id',
            'name',
            'onset',
            'offset',
            'duration',
            'location_x',
            'location_y',
            'area_of_interest',
        ],
        orient='row',
    ),
    'word': pl.DataFrame(
        [
            (0, 1, 'fixation', 1988147, 1988322, 175, 207.4090909090909, 151.54261363636363, ''),
            (0, 1, 'fixation', 1988351, 1988546, 195, 167.10408163265308, 147.5826530612245, ''),
            (0, 1, 'fixation', 1988592, 1988736, 144, 251.9013793103448, 152.1158620689655, ''),
            (0, 1, 'fixation', 1988788, 1989013, 225, 375.60796460177, 156.98584070796457, ''),
            (0, 1, 'fixation', 1989060, 1989170, 110, 447.34954954954986, 153.80810810810806, ''),
            (0, 1, 'fixation', 1989202, 1989424, 222, 513.3, 157.17892376681613, ''),
            (0, 1, 'fixation', 1989461, 1989585, 124, 581.2648000000002, 159.66959999999992, ''),
            (0, 1, 'fixation', 1989640, 1989891, 251, 707.7650793650796, 163.16626984126978, ''),
            (0, 1, 'fixation', 1989929, 1990049, 120, 787.0628099173551, 163.24462809917353, ''),
            (0, 1, 'fixation', 1990078, 1990304, 226, 846.2229074889868, 166.44008810572686, ''),
            (0, 1, 'fixation', 1990356, 1990652, 296, 978.3326599326601, 163.44141414141413, ''),
            (0, 1, 'fixation', 1990751, 1990926, 175, 180.84772727272727, 208.0573863636364, ''),
            (0, 1, 'fixation', 1990961, 1991140, 179, 150.4911111111111, 211.21777777777777, ''),
            (0, 1, 'fixation', 1991189, 1991317, 128, 239.65658914728684, 211.82480620155036, ''),
            (0, 1, 'fixation', 1991353, 1991495, 142, 302.71608391608396, 216.57412587412588, ''),
            (0, 1, 'fixation', 1991527, 1991715, 188, 375.24232804232804, 219.3873015873016, ''),
            (
                0, 1, 'fixation', 1991745, 1991899, 154,
                427.50838709677413, 217.13419354838712, 'pymovements:',
            ),
            (0, 1, 'fixation', 1991950, 1992230, 280, 600.1049822064056, 213.44768683274023, ''),
            (0, 1, 'fixation', 1992284, 1992569, 285, 725.8087412587413, 222.21293706293707, ' '),
            (0, 1, 'fixation', 1992611, 1992757, 146, 791.1496598639455, 221.16598639455782, 'package'),  # noqa: E501
            (0, 1, 'fixation', 1992792, 1992969, 177, 848.5044943820226, 221.47415730337084, ' '),
            (0, 1, 'fixation', 1993004, 1993238, 234, 932.0889361702128, 221.67829787234044, 'eye'),
            (0, 1, 'fixation', 1993274, 1993510, 236, 1024.154852320675, 221.48607594936712, 'movement'),  # noqa: E501
            (0, 1, 'fixation', 1993610, 1993716, 106, 200.10841121495332, 264.7196261682243, ''),
            (0, 1, 'fixation', 1993752, 1993948, 196, 157.92436548223353, 268.2375634517766, ''),
            (0, 1, 'fixation', 1993982, 1994193, 211, 241.02405660377357, 271.5188679245283, ''),
            (0, 1, 'fixation', 1994223, 1994383, 160, 296.44596273291927, 273.2776397515528, ''),
            (0, 1, 'fixation', 1994436, 1994710, 274, 435.9218181818182, 286.8061818181818, ''),
            (0, 1, 'fixation', 1994761, 1994900, 139, 522.06, 286.785, ''),
            (0, 1, 'fixation', 1994957, 1995109, 152, 606.8084967320262, 285.3562091503268, ''),
            (0, 1, 'fixation', 1995156, 1995323, 167, 688.3916666666667, 284.9291666666666, ''),
            (0, 1, 'fixation', 1995374, 1995532, 158, 770.340251572327, 289.7440251572327, ''),
            (0, 1, 'fixation', 1995558, 1995805, 247, 825.5754032258062, 287.07620967741934, ''),
            (0, 1, 'fixation', 1995841, 1995988, 147, 880.3533783783784, 283.3432432432432, ''),
            (0, 1, 'fixation', 1996026, 1996198, 172, 938.5502890173411, 281.85953757225434, ''),
            (0, 1, 'fixation', 1996245, 1996412, 167, 1022.4404761904764, 278.0517857142857, ''),
            (0, 1, 'fixation', 1996517, 1996758, 241, 157.65289256198346, 323.6400826446281, ''),
            (0, 1, 'fixation', 1996804, 1997014, 210, 223.56682464454977, 337.47156398104266, ''),
            (0, 1, 'fixation', 1997043, 1997190, 147, 274.86756756756756, 344.575, ''),
            (0, 1, 'fixation', 1997223, 1997438, 215, 368.6263888888888, 349.68055555555554, ''),
            (0, 1, 'fixation', 1997488, 1997653, 165, 460.4620481927711, 359.32289156626507, ''),
            (0, 1, 'fixation', 1997678, 1997905, 227, 432.2407894736842, 357.230701754386, ''),
            (0, 1, 'fixation', 1997954, 1998254, 300, 521.389368770764, 356.7348837209302, ''),
            (0, 1, 'fixation', 1998285, 1998512, 227, 477.1824561403509, 357.9864035087719, ''),
            (0, 1, 'fixation', 1998562, 1998790, 228, 577.8620087336244, 364.32532751091696, ''),
            (0, 1, 'fixation', 1998838, 1999070, 232, 703.7060085836911, 360.56609442060096, ''),
            (0, 1, 'fixation', 1999125, 1999382, 257, 830.8821705426357, 355.15271317829456, ''),
            (0, 1, 'fixation', 1999436, 1999625, 189, 952.5884210526315, 352.0815789473684, ''),
            (0, 1, 'fixation', 1999663, 1999819, 156, 1009.4426751592357, 342.1987261146497, ''),
            (0, 1, 'fixation', 1999922, 2000103, 181, 157.89505494505497, 413.2324175824176, ''),
            (0, 1, 'fixation', 2000129, 2000245, 116, 184.99401709401718, 409.1675213675213, ''),
            (0, 1, 'fixation', 2000295, 2000455, 160, 272.43975155279503, 416.9608695652175, ''),
            (0, 1, 'fixation', 2000514, 2000641, 127, 389.371875, 417.5953125, ''),
            (0, 1, 'fixation', 2000677, 2000894, 217, 446.2220183486238, 419.33073394495403, ''),
            (0, 1, 'fixation', 2000930, 2001173, 243, 526.5098360655738, 423.3586065573772, ''),
            (0, 1, 'fixation', 2001208, 2001459, 251, 612.4912698412701, 425.66468253968253, ''),
            (0, 1, 'fixation', 2001495, 2001712, 217, 708.4536697247707, 423.444495412844, ''),
            (0, 1, 'fixation', 2001746, 2001930, 184, 773.7962162162162, 423.02918918918914, ''),
            (0, 1, 'fixation', 2002003, 2002122, 119, 857.3725000000001, 422.345, ''),
            (0, 1, 'fixation', 2002160, 2002306, 146, 936.16462585034, 418.06870748299326, ''),
            (0, 1, 'fixation', 2002308, 2002442, 134, 940.3585185185185, 416.97555555555556, ''),
            (0, 1, 'fixation', 2002495, 2002603, 108, 1034.388990825688, 409.68256880733946, ''),
            (0, 1, 'fixation', 2002709, 2002831, 122, 134.0609756097561, 491.25121951219506, ''),
            (0, 1, 'fixation', 2002863, 2003003, 140, 161.38581560283689, 482.5148936170213, ''),
            (0, 1, 'fixation', 2003042, 2003424, 382, 211.222454308094, 483.4208877284595, ''),
            (0, 1, 'fixation', 2003453, 2003657, 204, 283.9468292682926, 485.65999999999997, ''),
            (0, 1, 'fixation', 2003721, 2003917, 196, 422.41421319796956, 484.2720812182742, ''),
            (0, 1, 'fixation', 2003968, 2004074, 106, 509.65233644859813, 480.192523364486, ''),
            (0, 1, 'fixation', 2004132, 2004331, 199, 610.861, 484.6025000000001, ''),
            (0, 1, 'fixation', 2004399, 2004687, 288, 717.8470588235293, 486.0269896193772, ''),
            (0, 1, 'fixation', 2004714, 2004878, 164, 785.6884848484849, 481.4890909090909, ''),
            (0, 1, 'fixation', 2004931, 2005109, 178, 896.4055865921787, 480.51899441340777, ''),
            (0, 1, 'fixation', 2005138, 2005287, 149, 933.612, 481.8833333333333, ''),
        ],
        schema=[
            'text_id',
            'page_id',
            'name',
            'onset',
            'offset',
            'duration',
            'location_x',
            'location_y',
            'area_of_interest',
        ],
        orient='row',
    ),
}


@pytest.fixture(name='dataset')
def dataset_fixture():
    dataset = pm.Dataset('ToyDataset', 'toy_dataset')
    dataset.download()
    dataset.load()
    dataset.pix2deg()
    dataset.pos2vel()
    dataset.detect_events('ivt')
    dataset.compute_event_properties(('location', {'position_column': 'pixel'}))
    yield dataset


@pytest.mark.parametrize(
    ('aoi_column'),
    [
        'word',
        'char',
    ],
)
def test_gaze_to_aoi_mapping_char_width_height(aoi_column, dataset):
    aoi_df = pm.stimulus.text.from_file(
        'tests/files/toy_text_1_1_aoi.csv',
        aoi_column=aoi_column,
        start_x_column='top_left_x',
        start_y_column='top_left_y',
        width_column='width',
        height_column='height',
        page_column='page',
    )

    dataset.events[0].map_to_aois(aoi_df)
    assert_frame_equal(dataset.events[0].frame, EXPECTED_DF[aoi_column])


@pytest.mark.parametrize(
    ('aoi_column'),
    [
        'word',
        'char',
    ],
)
def test_gaze_to_aoi_mapping_char_end(aoi_column, dataset):
    aoi_df = pm.stimulus.text.from_file(
        'tests/files/toy_text_1_1_aoi.csv',
        aoi_column=aoi_column,
        start_x_column='top_left_x',
        start_y_column='top_left_y',
        end_x_column='bottom_left_x',
        end_y_column='bottom_left_y',
        page_column='page',
    )

    dataset.events[0].map_to_aois(aoi_df)
    assert_frame_equal(dataset.events[0].frame, EXPECTED_DF[aoi_column])


def test_map_to_aois_raises_value_error():
    aoi_df = pm.stimulus.text.from_file(
        'tests/files/toy_text_1_1_aoi.csv',
        aoi_column='char',
        start_x_column='top_left_x',
        start_y_column='top_left_y',
        width_column='width',
        height_column='height',
        page_column='page',
    )
    gaze_df = pm.gaze.io.from_csv(
        'tests/files/judo1000_example.csv',
        **{'separator': '\t'},
        position_columns=['x_left', 'y_left', 'x_right', 'y_right'],
    )

    with pytest.raises(ValueError) as excinfo:
        gaze_df.map_to_aois(aoi_df, eye='right', gaze_type='')
    msg, = excinfo.value.args
    assert msg == 'neither position nor pixel in gaze dataframe, one needed for mapping'


def test_map_to_aois_raises_value_error_missing_width_height(dataset):
    aoi_df = pm.stimulus.text.from_file(
        'tests/files/toy_text_1_1_aoi.csv',
        aoi_column='char',
        start_x_column='top_left_x',
        start_y_column='top_left_y',
        page_column='page',
    )
    with pytest.raises(ValueError) as excinfo:
        dataset.events[0].map_to_aois(aoi_df)
    msg, = excinfo.value.args
    assert msg == 'either aoi_dataframe.width or aoi_dataframe.end_x_column have to be not None'
